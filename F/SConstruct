#!/usr/bin/python

F_Object = Builder(action = 'F -o $TARGET -c $SOURCE', \
                    suffix = '.o', src_suffix = '.f90')

F_Program = Builder(action = 'F -O0 -o $TARGET $SOURCES')
#F_Program = Builder(action = 'f95 -o $TARGET $SOURCES')

def maketest(env, target, module, testvars):
    env.Command(target, ['TEST_' + module], """
            replace "!%%%%OUTPUTVARS%%%%" "%s" < Baum_DOSE.f90 > TEST_%s_orig.f90
            F -O0 -o TEST_%s_orig TEST_%s_orig.f90
            ./TEST_%s > TEST_%s_OUTPUT_NEW
            ./TEST_%s_orig > TEST_%s_OUTPUT_ORIG
            #ndiff --relative-error 1.0e-6 TEST_%s_OUTPUT_ORIG TEST_%s_OUTPUT_NEW
            diff -u -s TEST_%s_OUTPUT_ORIG TEST_%s_OUTPUT_NEW
    """ % (testvars, module, module, module, module, module, module, module, module, module, module, module))
    env.Command(target + "_clean", [], 'rm TEST_%s*' % (module))

env = Environment()
env['BUILDERS']['Object'] = F_Object
env['BUILDERS']['Program'] = F_Program

# New fully build model - doesn't work yet!
do3se = env.Program(target = 'DO3SE', source = ['Inputs_mod.f90'])

# Module tests

common_modules = ['Params_Veg_mod.f90', 'Params_Site_mod.f90', 'Inputs_mod.f90', \
        'Constants_mod.f90', 'Variables_mod.f90', 'Functions_mod.f90']

# Phenology
env.Program(target = 'TEST_Phenology', \
    source = common_modules + ['Phenology_mod.f90', 'Phenology_test.f90'])
maketest(env, 'test_phen', 'Phenology', 'LAI, SAI, fphen')

# Irradiance
env.Program(target = 'TEST_Irradiance', \
    source = common_modules + ['Phenology_mod.f90', 'Irradiance_mod.f90', 'Irradiance_test.f90'])
maketest(env, 'test_irrad', 'Irradiance', 'PARshade, PARsun, flight, leaf_flight')

# Environmental
env.Program(target = 'TEST_Environmental', \
    source = common_modules + ['Environmental_mod.f90', 'Environmental_test.f90'])
maketest(env, 'test_env', 'Environmental', 'ftemp, fVPD')

# Soil
env.Program(target = 'TEST_Soil', \
    source = common_modules + ['Soil_mod.f90', 'Soil_test.f90'])
maketest(env, 'test_soil', 'Soil', 'precip_use, SWP')

# R_mod
env.Program(target = 'TEST_R', \
    source = common_modules + ['Phenology_mod.f90', 'R_mod.f90', 'R_test.f90'])
maketest(env, 'test_r', 'R', 'ustar, Ra_u, Rb, Rgs, Rinc')

# Evapotranspiration_mod
env.Program(target = 'TEST_Evapotranspiration', \
    source = common_modules + ['Phenology_mod.f90', 'R_mod.f90', 'Soil_mod.f90', \
    'Evapotranspiration_mod.f90', 'Evapotranspiration_test.f90'])
maketest(env, 'test_evap', 'Evapotranspiration', 'Ei_use')

all_modules = common_modules + ['Phenology_mod.f90', 'Environmental_mod.f90', 'Irradiance_mod.f90',\
        'Evapotranspiration_mod.f90', 'Soil_mod.f90', 'R_mod.f90']


#env.Program(target = 'TEST_New', source = all_modules + ['Run.f90', 'Test.f90'])
#env.Program(target = 'TEST_Orig', source = 'Baum_DOSE_orig.f90')
#env.Command('test', ['TEST_New', 'TEST_Orig'], """
#        ./TEST_Orig > TEST_OUTPUT_Orig
#        ./TEST_New > TEST_OUPUT_New
#        ndiff --relative-error 1.0e-6 TEST_OUTPUT_Orig TEST_OUTPUT_New
#        diff -u -s TEST_OUTPUT_Orig TEST_OUTPUT_New""")

const = env.Object('Constants_mod.f90')
p_veg = env.Object('Params_Veg_mod.f90')
p_site = env.Object('Params_Site_mod.f90')
vars = env.Object('Variables_mod.f90')
inputs = env.Object('Inputs_mod.f90')
funcs = env.Object('Functions_mod.f90')

common = const + p_veg + p_site + vars + inputs + funcs

phen = env.Object('Phenology_mod.f90')
irrad = env.Object('Irradiance_mod.f90')
evap = env.Object('Evapotranspiration_mod.f90')
envir = env.Object('Environmental_mod.f90')
r = env.Object('R_mod.f90')
soil = env.Object('Soil_mod.f90')
flux = env.Object('O3_Flux_mod.f90')
effects = env.Object('O3_Effects_mod.f90')

all = common + phen + irrad + envir + r + evap + soil + flux + effects

env.Program(target = 'TEST_new', source = all + ['Run.f90', 'Test.f90'])
env.Program(target = 'TEST_old', source = 'Baum_DOSE_test.f90')
env.Command('test', ['TEST_new', 'TEST_old'], """
        ./TEST_old > TEST_OUTPUT_old
        ./TEST_new > TEST_OUTPUT_new
        diff -u -s TEST_OUTPUT_old TEST_OUTPUT_new""")
env.Command('ntest', ['TEST_new', 'TEST_old'], """
        ./TEST_old > TEST_OUTPUT_old
        ./TEST_new > TEST_OUTPUT_new
        ndiff --relative-error 1.0e-6 TEST_OUTPUT_old TEST_OUTPUT_new""")

Default(do3se)
